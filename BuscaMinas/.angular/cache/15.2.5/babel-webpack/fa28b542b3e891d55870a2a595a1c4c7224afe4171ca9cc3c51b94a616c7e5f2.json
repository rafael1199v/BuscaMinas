{"ast":null,"code":"export class CellService {\n  buildBoard(rows, columns) {\n    let board = [];\n    for (let i = 0; i < rows; i++) {\n      let rows = [];\n      for (let j = 0; j < columns; j++) {\n        let element = {\n          status: 'toOpen',\n          mine: false,\n          mineProximity: 0\n        };\n        rows.push(element);\n      }\n      board.push(rows);\n    }\n    board = this.putMines(2, board, rows, columns);\n    return board;\n  }\n  putMines(numberOfMines, board, rows, columns) {\n    let set = new Set();\n    for (let i = 0; i < numberOfMines; i++) {\n      let pairs = [Math.random() * (rows + 1), Math.random() * (columns + 1)];\n      if (set.has(pairs)) {\n        i--;\n      } else {\n        set.add(pairs);\n      }\n    }\n    for (let pair of set) {\n      board[pair[0]][pair[1]].mine = true;\n    }\n    return board;\n  }\n}","map":{"version":3,"mappings":"AAGA,OAAM,MAAOA,WAAW;EAEpBC,UAAU,CAACC,IAAY,EAAEC,OAAe;IAEpC,IAAIC,KAAK,GAAa,EAAE;IACxB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAEG,CAAC,EAAE,EAAC;MACzB,IAAIH,IAAI,GAAW,EAAE;MACrB,KAAI,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,EAAEG,CAAC,EAAE,EAAC;QAC9B,IAAIC,OAAO,GAAS;UAACC,MAAM,EAAE,QAAQ;UAAEC,IAAI,EAAE,KAAK;UAAEC,aAAa,EAAE;QAAC,CAAC;QACrER,IAAI,CAACS,IAAI,CAACJ,OAAO,CAAC;;MAEpBH,KAAK,CAACO,IAAI,CAACT,IAAI,CAAC;;IAIpBE,KAAK,GAAG,IAAI,CAACQ,QAAQ,CAAC,CAAC,EAAER,KAAK,EAAEF,IAAI,EAAEC,OAAO,CAAC;IAE9C,OAAOC,KAAK;EAChB;EAGAQ,QAAQ,CAACC,aAAqB,EAAET,KAAe,EAAEF,IAAY,EAAEC,OAAe;IAC1E,IAAIW,GAAG,GAAG,IAAIC,GAAuB;IAErC,KAAI,IAAIV,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,aAAa,EAAER,CAAC,EAAE,EAAC;MAClC,IAAIW,KAAK,GAAqB,CAACC,IAAI,CAACC,MAAM,EAAE,IAAIhB,IAAI,GAAG,CAAC,CAAC,EAAEe,IAAI,CAACC,MAAM,EAAE,IAAIf,OAAO,GAAG,CAAC,CAAC,CAAC;MAEzF,IAAGW,GAAG,CAACK,GAAG,CAACH,KAAK,CAAC,EAAC;QACdX,CAAC,EAAE;OACN,MACG;QACAS,GAAG,CAACM,GAAG,CAACJ,KAAK,CAAC;;;IAMtB,KAAI,IAAIK,IAAI,IAAIP,GAAG,EAAC;MAChBV,KAAK,CAACiB,IAAI,CAAC,CAAC,CAAC,CAAC,CAACA,IAAI,CAAC,CAAC,CAAC,CAAC,CAACZ,IAAI,GAAG,IAAI;;IAGvC,OAAOL,KAAK;EAChB","names":["CellService","buildBoard","rows","columns","board","i","j","element","status","mine","mineProximity","push","putMines","numberOfMines","set","Set","pairs","Math","random","has","add","pair"],"sourceRoot":"","sources":["C:\\Users\\ACER\\Desktop\\Universidad\\Semestre 3\\Programacion 2\\BuscaMinas2\\ClientApp\\src\\app\\services\\Cell.service.ts"],"sourcesContent":["\r\nimport { Cell } from \"../models/Cell\";\r\n\r\nexport class CellService{\r\n\r\n    buildBoard(rows: number, columns: number){\r\n\r\n        let board: Cell[][] = []\r\n        for(let i = 0; i < rows; i++){\r\n            let rows: Cell[] = [];\r\n            for(let j = 0; j < columns; j++){\r\n              let element: Cell = {status: 'toOpen', mine: false, mineProximity: 0};\r\n              rows.push(element);\r\n            }\r\n            board.push(rows);\r\n        }\r\n\r\n\r\n        board = this.putMines(2, board, rows, columns);\r\n\r\n        return board;\r\n    }\r\n\r\n\r\n    putMines(numberOfMines: number, board: Cell[][], rows: number, columns: number){\r\n        let set = new Set<([number, number])>;\r\n\r\n        for(let i = 0; i < numberOfMines; i++){\r\n            let pairs: [number, number] = [Math.random() * (rows + 1), Math.random() * (columns + 1)]\r\n\r\n            if(set.has(pairs)){\r\n                i--;\r\n            }\r\n            else{\r\n                set.add(pairs);\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        for(let pair of set){\r\n            board[pair[0]][pair[1]].mine = true;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}