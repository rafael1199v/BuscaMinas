{"ast":null,"code":"import { GameState } from \"../models/Game.enum\";\nimport { boardService } from \"./board.service\";\nexport class CellService {\n  constructor() {\n    this.boardService = new boardService();\n  }\n  checkCell(board, row, column, cellsGame, numberOfMines, gameEstate) {\n    if (board[row][column].mine) {\n      board[row][column].status = 'mine';\n      this.boardService.gameOver(board);\n      return GameState.lose;\n    } else if (cellsGame.cellsOpened >= cellsGame.cells - cellsGame.numberMines) {\n      console.log(\"que? \", cellsGame);\n      console.log('Ganaste ? ', cellsGame.cellsOpened + 1, \" y \", cellsGame.cells - cellsGame.numberMines);\n      return GameState.win;\n    }\n    // console.log((cellsGame.cells - cellsGame.numberMines));\n    // console.log(cellsGame);\n    // console.log(gameEstate);\n    return GameState.playing;\n  }\n  isValid(i, j, rows, columns) {\n    if (i < 0 || j < 0 || i >= rows || j >= columns) {\n      return false;\n    }\n    return true;\n  }\n  openCell(board, row, column, rows, columns, cellsGame) {\n    if (!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mine) {\n      return;\n    } else if (board[row][column].mineProximity != 0) {\n      board[row][column].status = 'open';\n      cellsGame.cellsOpened += 1;\n    } else if (board[row][column].mineProximity == 0) {\n      console.log(\"Se descubre la celda: \" + row + \" \" + column);\n      board[row][column].status = 'open';\n      cellsGame.cellsOpened += 1;\n      this.openCell(board, row + 1, column, rows, columns, cellsGame);\n      this.openCell(board, row - 1, column, rows, columns, cellsGame);\n      this.openCell(board, row, column + 1, rows, columns, cellsGame);\n      this.openCell(board, row, column - 1, rows, columns, cellsGame);\n      this.openCell(board, row + 1, column + 1, rows, columns, cellsGame);\n      this.openCell(board, row - 1, column - 1, rows, columns, cellsGame);\n      this.openCell(board, row - 1, column + 1, rows, columns, cellsGame);\n      this.openCell(board, row + 1, column - 1, rows, columns, cellsGame);\n    }\n  }\n  flag(cell) {\n    if (cell.status == 'toOpen') {\n      cell.status = 'flag';\n    } else if (cell.status == 'flag') {\n      cell.status = 'toOpen';\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["GameState","boardService","CellService","constructor","checkCell","board","row","column","cellsGame","numberOfMines","gameEstate","mine","status","gameOver","lose","cellsOpened","cells","numberMines","console","log","win","playing","isValid","i","j","rows","columns","openCell","mineProximity","flag","cell"],"sourceRoot":"","sources":["C:\\Users\\ACER\\Desktop\\Universidad\\Semestre 3\\Programacion 2\\BuscaMinas2\\ClientApp\\src\\app\\services\\Cell.service.ts"],"sourcesContent":["\r\nimport { Cell } from \"../models/Cell\";\r\nimport { GameState } from \"../models/Game.enum\";\r\nimport { boardService } from \"./board.service\";\r\n\r\nexport class CellService{\r\n\r\n    boardService: boardService = new boardService();\r\n\r\n    checkCell(board: Cell[][], row: number, column: number, cellsGame: any, numberOfMines: number, gameEstate: GameState) : GameState{\r\n        \r\n        if(board[row][column].mine){\r\n            board[row][column].status = 'mine';\r\n            this.boardService.gameOver(board);\r\n            return GameState.lose;\r\n        }\r\n        else if((cellsGame.cellsOpened) >= (cellsGame.cells - cellsGame.numberMines)){\r\n            console.log(\"que? \",cellsGame);\r\n            console.log('Ganaste ? ', (cellsGame.cellsOpened + 1), \" y \", cellsGame.cells - cellsGame.numberMines)\r\n            return GameState.win;\r\n        }\r\n        // console.log((cellsGame.cells - cellsGame.numberMines));\r\n        // console.log(cellsGame);\r\n        // console.log(gameEstate);\r\n\r\n        return GameState.playing;\r\n\r\n        \r\n    }\r\n\r\n\r\n    isValid(i: number, j: number, rows: number, columns: number) : boolean{\r\n        if((i < 0 || j < 0) || (i >= rows || j >= columns)){\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    openCell(board: Cell[][],row: number, column: number, rows: number, columns: number, cellsGame: any) : void {\r\n        if(!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mine){\r\n            return;\r\n        }\r\n        else if(board[row][column].mineProximity != 0){\r\n            board[row][column].status = 'open';\r\n            cellsGame.cellsOpened += 1;\r\n        }\r\n        else if(board[row][column].mineProximity == 0){\r\n            console.log(\"Se descubre la celda: \" + row + \" \" + column);\r\n            board[row][column].status = 'open';\r\n            cellsGame.cellsOpened += 1;\r\n            this.openCell(board, row + 1, column, rows, columns, cellsGame);\r\n            this.openCell(board, row - 1, column, rows, columns, cellsGame);\r\n            this.openCell(board, row, column + 1, rows, columns, cellsGame);\r\n            this.openCell(board, row, column - 1, rows, columns, cellsGame);\r\n\r\n            this.openCell(board, row + 1, column + 1, rows, columns, cellsGame);\r\n            this.openCell(board, row - 1, column - 1, rows, columns, cellsGame);\r\n            this.openCell(board, row - 1, column + 1, rows, columns, cellsGame);\r\n            this.openCell(board, row + 1, column - 1, rows, columns, cellsGame);\r\n        }\r\n    }\r\n\r\n    flag(cell: Cell) : void{\r\n        if(cell.status == 'toOpen'){\r\n            cell.status = 'flag';\r\n        }\r\n        else if(cell.status == 'flag'){\r\n            cell.status = 'toOpen';\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n    \r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}