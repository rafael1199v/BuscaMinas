{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { GameState } from '../models/Game.enum';\nlet BoardComponent = class BoardComponent {\n  constructor(cellService) {\n    this.cellService = cellService;\n    this.rows = 8;\n    this.columns = 8;\n    this.numberOfMines = 1;\n    this.gameState = GameState.playing;\n    this.cellsGame = {\n      cellsOpened: 0,\n      cells: this.rows * this.columns,\n      numberMines: this.numberOfMines\n    };\n    this.difficulty = \"Easy\";\n    this.board = [];\n    this.board = cellService.buildBoard(this.rows, this.columns, this.numberOfMines);\n  }\n  checkCell(row, column) {\n    // this.gameState = this.cellService.checkCell(this.board, row, column, this.cellsGame, this.numberOfMines, this.gameState);\n    this.cellService.openCell(this.board, row, column, this.rows, this.columns, this.cellsGame);\n    this.gameState = this.cellService.checkCell(this.board, row, column, this.cellsGame, this.numberOfMines, this.gameState);\n    // console.log(\"Estado del juego \", this.gameState)\n    // console.log(GameState.lose);\n    // console.log(GameState.playing);\n    // console.log(GameState.win);\n  }\n\n  flag(cell) {\n    this.cellService.flag(cell);\n    return false;\n  }\n  reset() {\n    this.board = this.cellService.buildBoard(this.rows, this.columns, this.numberOfMines);\n    this.gameState = GameState.playing;\n    this.cellsGame = {\n      cellsOpened: 0,\n      cells: this.rows * this.columns,\n      numberMines: this.numberOfMines\n    };\n  }\n  getDifficultys() {\n    return this.cellService.getDifficultys();\n  }\n  changeDifficulty() {\n    if (this.difficulty == \"Easy\") {\n      this.rows = this.columns = 8;\n      this.numberOfMines = 10;\n    } else if (this.difficulty == \"Normal\") {\n      this.rows = this.columns = 13;\n      this.numberOfMines = 20;\n    } else if (this.difficulty == \"Hard\") {\n      this.rows = this.columns = 15;\n      this.numberOfMines = 40;\n    } else {\n      this.rows = this.columns = 15;\n      this.numberOfMines = 90;\n    }\n    console.log(this.rows, this.columns, this.numberOfMines);\n    this.board = this.cellService.buildBoard(this.rows, this.columns, this.numberOfMines);\n  }\n};\nBoardComponent = __decorate([Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})], BoardComponent);\nexport { BoardComponent };","map":{"version":3,"mappings":"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","names":["Component","GameState","BoardComponent","constructor","cellService","playing","cellsOpened","cells","rows","columns","numberMines","numberOfMines","board","buildBoard","checkCell","row","column","openCell","cellsGame","gameState","flag","cell","reset","getDifficultys","changeDifficulty","difficulty","console","log","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\ACER\\Desktop\\Universidad\\Semestre 3\\Programacion 2\\BuscaMinas2\\ClientApp\\src\\app\\board\\board.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Cell } from '../models/Cell';\nimport { CellService } from '../services/Cell.service';\nimport { GameState } from '../models/Game.enum';\n\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})\nexport class BoardComponent {\n  \n  rows: number = 8;\n  columns: number = 8;\n  numberOfMines: number = 1;\n  gameState: GameState = GameState.playing;\n  cellsGame: any = {cellsOpened: 0, cells: this.rows * this.columns, numberMines: this.numberOfMines};\n  difficulty: string = \"Easy\"\n  board: Cell[][] = [];\n\n  constructor(private cellService: CellService){\n   \n\n    this.board = cellService.buildBoard(this.rows, this.columns, this.numberOfMines); \n  }\n\n\n  checkCell(row: number, column: number){\n    // this.gameState = this.cellService.checkCell(this.board, row, column, this.cellsGame, this.numberOfMines, this.gameState);\n    this.cellService.openCell(this.board, row, column, this.rows, this.columns, this.cellsGame);\n    this.gameState = this.cellService.checkCell(this.board, row, column, this.cellsGame, this.numberOfMines, this.gameState);\n    // console.log(\"Estado del juego \", this.gameState)\n\n    // console.log(GameState.lose);\n    // console.log(GameState.playing);\n    // console.log(GameState.win);\n  }\n\n  flag(cell: Cell){\n    this.cellService.flag(cell);\n\n    return false;\n  }\n\n\n  reset(){\n    this.board = this.cellService.buildBoard(this.rows, this.columns, this.numberOfMines);\n    this.gameState = GameState.playing;\n    this.cellsGame = {cellsOpened: 0, cells: this.rows * this.columns, numberMines: this.numberOfMines};\n  }\n\n  getDifficultys() : string[]{\n    return this.cellService.getDifficultys();\n  }\n\n\n  changeDifficulty(){\n\n     if(this.difficulty == \"Easy\"){\n      this.rows = this.columns = 8;\n      this.numberOfMines = 10;\n    }\n    else if(this.difficulty == \"Normal\"){\n      this.rows = this.columns = 13;\n      this.numberOfMines = 20;\n    }\n    else if(this.difficulty == \"Hard\"){\n      this.rows = this.columns = 15;\n      this.numberOfMines = 40;\n    }\n    else{\n      this.rows = this.columns = 15;\n      this.numberOfMines = 90;\n    }\n\n    console.log(this.rows, this.columns, this.numberOfMines);\n    this.board = this.cellService.buildBoard(this.rows, this.columns, this.numberOfMines); \n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}