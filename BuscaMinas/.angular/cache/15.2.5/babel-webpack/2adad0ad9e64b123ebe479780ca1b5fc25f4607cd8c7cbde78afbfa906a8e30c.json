{"ast":null,"code":"export class CellService {\n  buildBoard(rows, columns) {\n    let board = [];\n    for (let i = 0; i < rows; i++) {\n      let rows = [];\n      for (let j = 0; j < columns; j++) {\n        let element = {\n          status: 'toOpen',\n          mine: false,\n          mineProximity: 0\n        };\n        rows.push(element);\n      }\n      board.push(rows);\n    }\n    board = this.putMines(2, board, rows, columns);\n    board = this.GetMineProximity(board, rows, columns);\n    return board;\n  }\n  putMines(numberOfMines, board, rows, columns) {\n    let set = new Set();\n    for (let i = 0; i < numberOfMines; i++) {\n      let pairs = [Math.floor(Math.random() * rows), Math.floor(Math.random() * columns)];\n      if (set.has(pairs)) {\n        i--;\n      } else {\n        set.add(pairs);\n      }\n    }\n    for (let pair of set) {\n      console.log(pair[0], pair[1]);\n      board[pair[0]][pair[1]].mine = true;\n    }\n    return board;\n  }\n  checkCell(cell) {\n    if (cell.status == 'open') {\n      return;\n    } else if (cell.mine) {\n      console.log('Perdiste');\n    } else {\n      cell.status = 'open';\n    }\n  }\n  isValid(i, j, rows, columns) {\n    if (i < 0 || j < 0 || i >= rows || j >= columns) {\n      return false;\n    }\n    return true;\n  }\n  GetMineProximity(board, rows, columns) {\n    const CASILLAS_ADYACENTES = [[1, 1], [-1, -1], [-1, 1], [1, -1], [1, 0], [-1, 0], [0, 1], [0, -1]];\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let mines = 0;\n        for (const pair of CASILLAS_ADYACENTES) {\n          if (!this.isValid(i + pair[0], j + pair[1], rows, columns)) {\n            continue;\n          }\n          if (board[i + pair[0]][j + pair[1]].mine) {\n            mines++;\n          }\n        }\n        board[i][j].mineProximity = mines;\n      }\n    }\n    return board;\n  }\n  openCell(board, row, column, rows, columns) {\n    if (!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mine) {\n      return;\n    } else if (board[row][column].mineProximity != 0) {\n      this.checkCell(board[row][column]);\n    } else {\n      console.log(\"Se descubre la celda: \" + row + \" \" + column);\n      this.checkCell(board[row][column]);\n      this.openCell(board, row + 1, column, rows, columns);\n      this.openCell(board, row - 1, column, rows, columns);\n      this.openCell(board, row, column + 1, rows, columns);\n      this.openCell(board, row, column - 1, rows, columns);\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["CellService","buildBoard","rows","columns","board","i","j","element","status","mine","mineProximity","push","putMines","GetMineProximity","numberOfMines","set","Set","pairs","Math","floor","random","has","add","pair","console","log","checkCell","cell","isValid","CASILLAS_ADYACENTES","mines","openCell","row","column"],"sourceRoot":"","sources":["C:\\Users\\ACER\\Desktop\\Universidad\\Semestre 3\\Programacion 2\\BuscaMinas2\\ClientApp\\src\\app\\services\\Cell.service.ts"],"sourcesContent":["\r\nimport { Cell } from \"../models/Cell\";\r\n\r\nexport class CellService{\r\n\r\n    buildBoard(rows: number, columns: number){\r\n\r\n        let board: Cell[][] = []\r\n        for(let i = 0; i < rows; i++){\r\n            let rows: Cell[] = [];\r\n            for(let j = 0; j < columns; j++){\r\n              let element: Cell = {status: 'toOpen', mine: false, mineProximity: 0};\r\n              rows.push(element);\r\n            }\r\n            board.push(rows);\r\n        }\r\n\r\n\r\n        board = this.putMines(2, board, rows, columns);\r\n        board = this.GetMineProximity(board, rows, columns);\r\n\r\n        return board;\r\n    }\r\n\r\n\r\n    putMines(numberOfMines: number, board: Cell[][], rows: number, columns: number){\r\n        let set = new Set<([number, number])>;\r\n\r\n        for(let i = 0; i < numberOfMines; i++){\r\n            let pairs: [number, number] = [Math.floor(Math.random() * (rows)), Math.floor(Math.random() * (columns))];\r\n\r\n            if(set.has(pairs)){\r\n                i--;\r\n            }\r\n            else{\r\n                set.add(pairs);\r\n            }\r\n        }\r\n\r\n        \r\n\r\n        for(let pair of set){\r\n            console.log(pair[0], pair[1])\r\n            board[pair[0]][pair[1]].mine = true;\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n\r\n    checkCell(cell: Cell){\r\n        if(cell.status == 'open'){\r\n            return;\r\n        }\r\n        else if(cell.mine){\r\n            console.log('Perdiste');\r\n        }\r\n        else{\r\n            cell.status = 'open';\r\n        }\r\n    }\r\n\r\n\r\n    isValid(i: number, j: number, rows: number, columns: number) : boolean{\r\n        if((i < 0 || j < 0) || (i >= rows || j >= columns)){\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    GetMineProximity(board: Cell[][], rows: number, columns: number){\r\n        \r\n        const CASILLAS_ADYACENTES: number[][] = [[1, 1],\r\n                                    [-1, -1],\r\n                                    [-1, 1],\r\n                                    [1, -1],\r\n                                    [1, 0],\r\n                                    [-1, 0],\r\n                                    [0, 1],\r\n                                    [0, -1]\r\n        ];\r\n\r\n        \r\n        for(let i = 0; i < rows; i++){\r\n            for(let j = 0; j < columns; j++){\r\n                let mines: number = 0;\r\n                for(const pair of CASILLAS_ADYACENTES){\r\n                    if(!this.isValid(i + pair[0], j + pair[1], rows, columns)){\r\n                        continue;\r\n                    }\r\n                    \r\n                    if(board[i + pair[0]][ j + pair[1]].mine){\r\n                        mines++;\r\n                    }\r\n                }\r\n\r\n                board[i][j].mineProximity = mines;\r\n            }\r\n        }\r\n\r\n\r\n        return board;\r\n        \r\n        \r\n    }\r\n\r\n\r\n\r\n    openCell(board: Cell[][],row: number, column: number, rows: number, columns: number){\r\n        if(!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mine){\r\n            return;\r\n        }\r\n        else if(board[row][column].mineProximity != 0){\r\n            this.checkCell(board[row][column]);\r\n        }\r\n        else{\r\n            console.log(\"Se descubre la celda: \" + row + \" \" + column);\r\n            this.checkCell(board[row][column]);\r\n            this.openCell(board, row + 1, column, rows, columns);\r\n            this.openCell(board, row - 1, column, rows, columns);\r\n            this.openCell(board, row, column + 1, rows, columns);\r\n            this.openCell(board, row, column - 1, rows, columns);\r\n        }\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}