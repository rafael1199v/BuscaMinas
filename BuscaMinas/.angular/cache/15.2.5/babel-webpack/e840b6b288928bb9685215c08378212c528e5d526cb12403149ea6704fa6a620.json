{"ast":null,"code":"import { GameState } from \"../models/Game.enum\";\nexport class CellService {\n  buildBoard(rows, columns, numberOfMines) {\n    let board = [];\n    for (let i = 0; i < rows; i++) {\n      let rows = [];\n      for (let j = 0; j < columns; j++) {\n        let element = {\n          status: 'toOpen',\n          mine: false,\n          mineProximity: 0\n        };\n        rows.push(element);\n      }\n      board.push(rows);\n    }\n    board = this.putMines(numberOfMines, board, rows, columns);\n    board = this.GetMineProximity(board, rows, columns);\n    return board;\n  }\n  putMines(numberOfMines, board, rows, columns) {\n    let set = new Set();\n    let i = 0;\n    while (i < numberOfMines) {\n      let pairs = [Math.floor(Math.random() * rows), Math.floor(Math.random() * columns)];\n      if (!set.has(pairs) && !board[pairs[0]][pairs[1]].mine) {\n        set.add(pairs);\n        // console.log(pairs[0], pairs[1])\n        board[pairs[0]][pairs[1]].mine = true;\n        i++;\n      }\n    }\n    return board;\n  }\n  checkCell(board, row, column, cellsGame, numberOfMines, gameEstate) {\n    if (board[row][column].status == 'open') {\n      return GameState.playing;\n    } else if (board[row][column].mine) {\n      board[row][column].status = 'mine';\n      this.gameOver(board);\n      return GameState.lose;\n    } else if (cellsGame.cellsOpened + 1 >= cellsGame.cells - cellsGame.numberMines) {\n      return GameState.win;\n    }\n    return GameState.playing;\n    // console.log((cellsGame.cells - cellsGame.numberMines));\n    // console.log(cellsGame);\n    // console.log(gameEstate);\n  }\n\n  isValid(i, j, rows, columns) {\n    if (i < 0 || j < 0 || i >= rows || j >= columns) {\n      return false;\n    }\n    return true;\n  }\n  GetMineProximity(board, rows, columns) {\n    const CASILLAS_ADYACENTES = [[1, 1], [-1, -1], [-1, 1], [1, -1], [1, 0], [-1, 0], [0, 1], [0, -1]];\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let mines = 0;\n        for (const pair of CASILLAS_ADYACENTES) {\n          if (!this.isValid(i + pair[0], j + pair[1], rows, columns)) {\n            continue;\n          }\n          if (board[i + pair[0]][j + pair[1]].mine) {\n            mines++;\n          }\n        }\n        board[i][j].mineProximity = mines;\n      }\n    }\n    return board;\n  }\n  openCell(board, row, column, rows, columns, cellsGame) {\n    if (!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mine) {\n      return;\n    } else if (board[row][column].mineProximity != 0) {\n      board[row][column].status = 'open';\n      cellsGame.cellsOpened += 1;\n    } else if (board[row][column].mineProximity == 0) {\n      // console.log(\"Se descubre la celda: \" + row + \" \" + column);\n      board[row][column].status = 'open';\n      cellsGame.cellsOpened += 1;\n      this.openCell(board, row + 1, column, rows, columns, cellsGame);\n      this.openCell(board, row - 1, column, rows, columns, cellsGame);\n      this.openCell(board, row, column + 1, rows, columns, cellsGame);\n      this.openCell(board, row, column - 1, rows, columns, cellsGame);\n      this.openCell(board, row + 1, column + 1, rows, columns, cellsGame);\n      this.openCell(board, row - 1, column - 1, rows, columns, cellsGame);\n      this.openCell(board, row - 1, column + 1, rows, columns, cellsGame);\n      this.openCell(board, row + 1, column - 1, rows, columns, cellsGame);\n    }\n  }\n  gameOver(board) {\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j].mine) {\n          board[i][j].status = 'mine';\n        }\n      }\n    }\n  }\n  flag(cell) {\n    if (cell.status == 'toOpen') {\n      cell.status = 'flag';\n    } else if (cell.status == 'flag') {\n      cell.status = 'toOpen';\n    }\n  }\n}","map":{"version":3,"mappings":"AAEA,SAASA,SAAS,QAAQ,qBAAqB;AAE/C,OAAM,MAAOC,WAAW;EAEpBC,UAAU,CAACC,IAAY,EAAEC,OAAe,EAAEC,aAAqB;IAE3D,IAAIC,KAAK,GAAa,EAAE;IACxB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAC;MACzB,IAAIJ,IAAI,GAAW,EAAE;MACrB,KAAI,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAC;QAC9B,IAAIC,OAAO,GAAS;UAACC,MAAM,EAAE,QAAQ;UAAEC,IAAI,EAAE,KAAK;UAAEC,aAAa,EAAE;QAAC,CAAC;QACrET,IAAI,CAACU,IAAI,CAACJ,OAAO,CAAC;;MAEpBH,KAAK,CAACO,IAAI,CAACV,IAAI,CAAC;;IAIpBG,KAAK,GAAG,IAAI,CAACQ,QAAQ,CAACT,aAAa,EAAEC,KAAK,EAAEH,IAAI,EAAEC,OAAO,CAAC;IAC1DE,KAAK,GAAG,IAAI,CAACS,gBAAgB,CAACT,KAAK,EAAEH,IAAI,EAAEC,OAAO,CAAC;IAEnD,OAAOE,KAAK;EAChB;EAGAQ,QAAQ,CAACT,aAAqB,EAAEC,KAAe,EAAEH,IAAY,EAAEC,OAAe;IAC1E,IAAIY,GAAG,GAAG,IAAIC,GAAuB;IACrC,IAAIV,CAAC,GAAW,CAAC;IAEjB,OAAMA,CAAC,GAAGF,aAAa,EAAC;MACpB,IAAIa,KAAK,GAAqB,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAIlB,IAAK,CAAC,EAAEgB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAIjB,OAAQ,CAAC,CAAC;MAEzG,IAAG,CAACY,GAAG,CAACM,GAAG,CAACJ,KAAK,CAAC,IAAI,CAACZ,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC,CAACP,IAAI,EAAC;QAClDK,GAAG,CAACO,GAAG,CAACL,KAAK,CAAC;QACd;QACAZ,KAAK,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,CAAC,CAAC,CAAC,CAACP,IAAI,GAAG,IAAI;QACrCJ,CAAC,EAAE;;;IAIX,OAAOD,KAAK;EAChB;EAGAkB,SAAS,CAAClB,KAAe,EAAEmB,GAAW,EAAEC,MAAc,EAAEC,SAAc,EAAEtB,aAAqB,EAAEuB,UAAqB;IAChH,IAAGtB,KAAK,CAACmB,GAAG,CAAC,CAACC,MAAM,CAAC,CAAChB,MAAM,IAAI,MAAM,EAAC;MACnC,OAAOV,SAAS,CAAC6B,OAAO;KAC3B,MACI,IAAGvB,KAAK,CAACmB,GAAG,CAAC,CAACC,MAAM,CAAC,CAACf,IAAI,EAAC;MAC5BL,KAAK,CAACmB,GAAG,CAAC,CAACC,MAAM,CAAC,CAAChB,MAAM,GAAG,MAAM;MAClC,IAAI,CAACoB,QAAQ,CAACxB,KAAK,CAAC;MACpB,OAAON,SAAS,CAAC+B,IAAI;KACxB,MACI,IAAIJ,SAAS,CAACK,WAAW,GAAG,CAAC,IAAML,SAAS,CAACM,KAAK,GAAGN,SAAS,CAACO,WAAY,EAAC;MAC7E,OAAOlC,SAAS,CAACmC,GAAG;;IAIxB,OAAOnC,SAAS,CAAC6B,OAAO;IAExB;IACA;IACA;EACJ;;EAGAO,OAAO,CAAC7B,CAAS,EAAEC,CAAS,EAAEL,IAAY,EAAEC,OAAe;IACvD,IAAIG,CAAC,GAAG,CAAC,IAAIC,CAAC,GAAG,CAAC,IAAMD,CAAC,IAAIJ,IAAI,IAAIK,CAAC,IAAIJ,OAAQ,EAAC;MAC/C,OAAO,KAAK;;IAGhB,OAAO,IAAI;EACf;EAIAW,gBAAgB,CAACT,KAAe,EAAEH,IAAY,EAAEC,OAAe;IAE3D,MAAMiC,mBAAmB,GAAe,CACZ,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACR,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EACP,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAClC;IAGD,KAAI,IAAI9B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAC;MACzB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,EAAEI,CAAC,EAAE,EAAC;QAC5B,IAAI8B,KAAK,GAAW,CAAC;QACrB,KAAI,MAAMC,IAAI,IAAIF,mBAAmB,EAAC;UAClC,IAAG,CAAC,IAAI,CAACD,OAAO,CAAC7B,CAAC,GAAGgC,IAAI,CAAC,CAAC,CAAC,EAAE/B,CAAC,GAAG+B,IAAI,CAAC,CAAC,CAAC,EAAEpC,IAAI,EAAEC,OAAO,CAAC,EAAC;YACtD;;UAGJ,IAAGE,KAAK,CAACC,CAAC,GAAGgC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAE/B,CAAC,GAAG+B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC5B,IAAI,EAAC;YACrC2B,KAAK,EAAE;;;QAIfhC,KAAK,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAACI,aAAa,GAAG0B,KAAK;;;IAKzC,OAAOhC,KAAK;EAGhB;EAEAkC,QAAQ,CAAClC,KAAe,EAACmB,GAAW,EAAEC,MAAc,EAAEvB,IAAY,EAAEC,OAAe,EAAEuB,SAAc;IAC/F,IAAG,CAAC,IAAI,CAACS,OAAO,CAACX,GAAG,EAAEC,MAAM,EAAEvB,IAAI,EAAEC,OAAO,CAAC,IAAIE,KAAK,CAACmB,GAAG,CAAC,CAACC,MAAM,CAAC,CAAChB,MAAM,IAAI,MAAM,IAAIJ,KAAK,CAACmB,GAAG,CAAC,CAACC,MAAM,CAAC,CAACf,IAAI,EAAC;MAC3G;KACH,MACI,IAAGL,KAAK,CAACmB,GAAG,CAAC,CAACC,MAAM,CAAC,CAACd,aAAa,IAAI,CAAC,EAAC;MAC1CN,KAAK,CAACmB,GAAG,CAAC,CAACC,MAAM,CAAC,CAAChB,MAAM,GAAG,MAAM;MAClCiB,SAAS,CAACK,WAAW,IAAI,CAAC;KAC7B,MACI,IAAG1B,KAAK,CAACmB,GAAG,CAAC,CAACC,MAAM,CAAC,CAACd,aAAa,IAAI,CAAC,EAAC;MAC1C;MACAN,KAAK,CAACmB,GAAG,CAAC,CAACC,MAAM,CAAC,CAAChB,MAAM,GAAG,MAAM;MAClCiB,SAAS,CAACK,WAAW,IAAI,CAAC;MAC1B,IAAI,CAACQ,QAAQ,CAAClC,KAAK,EAAEmB,GAAG,GAAG,CAAC,EAAEC,MAAM,EAAEvB,IAAI,EAAEC,OAAO,EAAEuB,SAAS,CAAC;MAC/D,IAAI,CAACa,QAAQ,CAAClC,KAAK,EAAEmB,GAAG,GAAG,CAAC,EAAEC,MAAM,EAAEvB,IAAI,EAAEC,OAAO,EAAEuB,SAAS,CAAC;MAC/D,IAAI,CAACa,QAAQ,CAAClC,KAAK,EAAEmB,GAAG,EAAEC,MAAM,GAAG,CAAC,EAAEvB,IAAI,EAAEC,OAAO,EAAEuB,SAAS,CAAC;MAC/D,IAAI,CAACa,QAAQ,CAAClC,KAAK,EAAEmB,GAAG,EAAEC,MAAM,GAAG,CAAC,EAAEvB,IAAI,EAAEC,OAAO,EAAEuB,SAAS,CAAC;MAE/D,IAAI,CAACa,QAAQ,CAAClC,KAAK,EAAEmB,GAAG,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEvB,IAAI,EAAEC,OAAO,EAAEuB,SAAS,CAAC;MACnE,IAAI,CAACa,QAAQ,CAAClC,KAAK,EAAEmB,GAAG,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEvB,IAAI,EAAEC,OAAO,EAAEuB,SAAS,CAAC;MACnE,IAAI,CAACa,QAAQ,CAAClC,KAAK,EAAEmB,GAAG,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEvB,IAAI,EAAEC,OAAO,EAAEuB,SAAS,CAAC;MACnE,IAAI,CAACa,QAAQ,CAAClC,KAAK,EAAEmB,GAAG,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAEvB,IAAI,EAAEC,OAAO,EAAEuB,SAAS,CAAC;;EAE3E;EAEAG,QAAQ,CAACxB,KAAe;IACpB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACmC,MAAM,EAAElC,CAAC,EAAE,EAAC;MACjC,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACC,CAAC,CAAC,CAACkC,MAAM,EAAEjC,CAAC,EAAE,EAAC;QACpC,IAAGF,KAAK,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAACG,IAAI,EAAC;UAChBL,KAAK,CAACC,CAAC,CAAC,CAACC,CAAC,CAAC,CAACE,MAAM,GAAG,MAAM;;;;EAI3C;EAGAgC,IAAI,CAACC,IAAU;IACX,IAAGA,IAAI,CAACjC,MAAM,IAAI,QAAQ,EAAC;MACvBiC,IAAI,CAACjC,MAAM,GAAG,MAAM;KACvB,MACI,IAAGiC,IAAI,CAACjC,MAAM,IAAI,MAAM,EAAC;MAC1BiC,IAAI,CAACjC,MAAM,GAAG,QAAQ;;EAE9B","names":["GameState","CellService","buildBoard","rows","columns","numberOfMines","board","i","j","element","status","mine","mineProximity","push","putMines","GetMineProximity","set","Set","pairs","Math","floor","random","has","add","checkCell","row","column","cellsGame","gameEstate","playing","gameOver","lose","cellsOpened","cells","numberMines","win","isValid","CASILLAS_ADYACENTES","mines","pair","openCell","length","flag","cell"],"sourceRoot":"","sources":["C:\\Users\\ACER\\Desktop\\Universidad\\Semestre 3\\Programacion 2\\BuscaMinas2\\ClientApp\\src\\app\\services\\Cell.service.ts"],"sourcesContent":["\r\nimport { Cell } from \"../models/Cell\";\r\nimport { GameState } from \"../models/Game.enum\";\r\n\r\nexport class CellService{\r\n\r\n    buildBoard(rows: number, columns: number, numberOfMines: number) : Cell[][]{\r\n\r\n        let board: Cell[][] = []\r\n        for(let i = 0; i < rows; i++){\r\n            let rows: Cell[] = [];\r\n            for(let j = 0; j < columns; j++){\r\n              let element: Cell = {status: 'toOpen', mine: false, mineProximity: 0};\r\n              rows.push(element);\r\n            }\r\n            board.push(rows);\r\n        }\r\n\r\n\r\n        board = this.putMines(numberOfMines, board, rows, columns);\r\n        board = this.GetMineProximity(board, rows, columns);\r\n\r\n        return board;\r\n    }\r\n\r\n\r\n    putMines(numberOfMines: number, board: Cell[][], rows: number, columns: number) : Cell[][]{\r\n        let set = new Set<([number, number])>;\r\n        let i: number = 0;\r\n\r\n        while(i < numberOfMines){\r\n            let pairs: [number, number] = [Math.floor(Math.random() * (rows)), Math.floor(Math.random() * (columns))];\r\n\r\n            if(!set.has(pairs) && !board[pairs[0]][pairs[1]].mine){\r\n                set.add(pairs);\r\n                // console.log(pairs[0], pairs[1])\r\n                board[pairs[0]][pairs[1]].mine = true;\r\n                i++;\r\n            }\r\n        }\r\n\r\n        return board;\r\n    }\r\n\r\n\r\n    checkCell(board: Cell[][], row: number, column: number, cellsGame: any, numberOfMines: number, gameEstate: GameState) : GameState{\r\n        if(board[row][column].status == 'open'){\r\n            return GameState.playing;\r\n        }\r\n        else if(board[row][column].mine){\r\n            board[row][column].status = 'mine';\r\n            this.gameOver(board);\r\n            return GameState.lose;\r\n        }\r\n        else if((cellsGame.cellsOpened + 1) >= (cellsGame.cells - cellsGame.numberMines)){\r\n            return GameState.win;\r\n        }\r\n\r\n\r\n        return GameState.playing;\r\n\r\n        // console.log((cellsGame.cells - cellsGame.numberMines));\r\n        // console.log(cellsGame);\r\n        // console.log(gameEstate);\r\n    }\r\n\r\n\r\n    isValid(i: number, j: number, rows: number, columns: number) : boolean{\r\n        if((i < 0 || j < 0) || (i >= rows || j >= columns)){\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    GetMineProximity(board: Cell[][], rows: number, columns: number) : Cell[][]{\r\n        \r\n        const CASILLAS_ADYACENTES: number[][] = [\r\n                                    [1, 1],\r\n                                    [-1, -1],\r\n                                    [-1, 1],\r\n                                    [1, -1],\r\n                                    [1, 0],\r\n                                    [-1, 0],\r\n                                    [0, 1],\r\n                                    [0, -1]\r\n        ];\r\n\r\n        \r\n        for(let i = 0; i < rows; i++){\r\n            for(let j = 0; j < columns; j++){\r\n                let mines: number = 0;\r\n                for(const pair of CASILLAS_ADYACENTES){\r\n                    if(!this.isValid(i + pair[0], j + pair[1], rows, columns)){\r\n                        continue;\r\n                    }\r\n                    \r\n                    if(board[i + pair[0]][ j + pair[1]].mine){\r\n                        mines++;\r\n                    }\r\n                }\r\n\r\n                board[i][j].mineProximity = mines;\r\n            }\r\n        }\r\n\r\n\r\n        return board;\r\n        \r\n        \r\n    }\r\n\r\n    openCell(board: Cell[][],row: number, column: number, rows: number, columns: number, cellsGame: any) : void {\r\n        if(!this.isValid(row, column, rows, columns) || board[row][column].status == 'open' || board[row][column].mine){\r\n            return;\r\n        }\r\n        else if(board[row][column].mineProximity != 0){\r\n            board[row][column].status = 'open';\r\n            cellsGame.cellsOpened += 1;\r\n        }\r\n        else if(board[row][column].mineProximity == 0){\r\n            // console.log(\"Se descubre la celda: \" + row + \" \" + column);\r\n            board[row][column].status = 'open';\r\n            cellsGame.cellsOpened += 1;\r\n            this.openCell(board, row + 1, column, rows, columns, cellsGame);\r\n            this.openCell(board, row - 1, column, rows, columns, cellsGame);\r\n            this.openCell(board, row, column + 1, rows, columns, cellsGame);\r\n            this.openCell(board, row, column - 1, rows, columns, cellsGame);\r\n\r\n            this.openCell(board, row + 1, column + 1, rows, columns, cellsGame);\r\n            this.openCell(board, row - 1, column - 1, rows, columns, cellsGame);\r\n            this.openCell(board, row - 1, column + 1, rows, columns, cellsGame);\r\n            this.openCell(board, row + 1, column - 1, rows, columns, cellsGame);\r\n        }\r\n    }\r\n\r\n    gameOver(board: Cell[][]){\r\n        for(let i = 0; i < board.length; i++){\r\n            for(let j = 0; j < board[i].length; j++){\r\n                if(board[i][j].mine){\r\n                    board[i][j].status = 'mine';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    flag(cell: Cell) : void{\r\n        if(cell.status == 'toOpen'){\r\n            cell.status = 'flag';\r\n        }\r\n        else if(cell.status == 'flag'){\r\n            cell.status = 'toOpen';\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}